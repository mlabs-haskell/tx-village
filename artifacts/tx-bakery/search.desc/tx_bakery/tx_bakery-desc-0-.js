searchState.loadedDescShard("tx_bakery", 0, "Transaction Bakery\nSend all change to an address\nAutomatically pick a suitable UTxO from the transaction …\nOptions to deal with change outputs and collateral returns\nOptions to deal with collateral selection\nExplicitly set a UTxO (doesn’t have to be an input UTxO)\nUse the last output of the TransactionInfo as change …\nNo collateral (for transaction without scripts)\nTransaction builder\nTransactionInfo with additional context required to build …\nConvert a TransactionInfo into a valid signed Transaction …\nConvert a TransactionInfo into a valid TransactionBody and …\nConvert a TransactionInfo into a valid signed Transaction\nTrait for a Cardano chain query client\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nQuery all the parameters required to build a transaction …\nInit TxBakey with the required configurations This allows …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransaction Metadata\nConvert a PLA TransactionInfo into a CSL transaction …\nTrait for a component capable of submitting transactions\nPOSIX time to/from slot conversions\nTransaction Info builder\nWallet trait\nExplicitly add execution units instead of running the …\nAttach transaction metadata to the context\nA chain query client responsible for all read actions from …\nCardano network discriminant\nA subset of Cardano protocol parameters, only handling …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nQuery the network id (not identical to network magic)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuery protocol parameters\nQuery UTxOs at an address\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTransaction Metadata\nTop level transaction metadata (can only be a Map)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComponent which can submit write actions to the chain\nWait for transaction confirmation on the chain\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSubmit a fully build and balanced tranasaction\nConvert a POSIX time into number of slots in the current …\nDatum and its hash\nInput from a public key wallet\nInput from a validator address with the attached datum and …\nSimple TransactionInfo builder\nInput to a transaction\nAdd multiple TxCerts\nAdd a transaction input\nAdd multiple transaction inputs\nAdd new minted tokens with their corresponding redeemer\nAdd a transaction output Output order will be preserved\nAdd multiple transaction outputs\nAdd an inpup from a public key wallet\nAdd a reference input\nAdd multiple reference inputs\nAdd a input from a validator address\nAdd multiple required signers of the transaction\nAdd a required signer of the transaction\nAdd a Tx Cert\nAdd multiple withdrawals\nAdd a withdrawal\nBuild a TransactionInfo\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart an empty scaffold\nSet the validity range of the transaction\nSimple wallet reading the signing key(s) from disk\nPlutus Script management\nSimple wallet reading the signing key(s) from disk\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialise a base wallet by reading the signinig keys into …\nInitialise an enterprise wallet by reading the signinig …\nScript will be added as script witness\nScript will be used from a reference input\nPlutus Script\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCardano wallet that has access to a private key (directly …\nReturns the argument unchanged.\nQuery the wallet address\nQuery the public key hash used by this wallet\nCalls <code>U::from(self)</code>.\nSigns a fully built transaction")